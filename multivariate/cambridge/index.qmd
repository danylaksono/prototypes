---
title: "Multivariate Gridded-Glyphmaps: Cambridge"
# author: "Dany Laksono, Aidan Slingsby, Radu Jianu"
execute:
  echo: false
format: 
  dashboard
    # nav-buttons: [github]
theme: 
  - cosmo
  - assets/quarto.scss
---


```{ojs}
//| echo: false
//| output: false
// Gridded-glyphmap
// import { slippyMap } from "8d39dcfbc8ad8557"
import { _setupParamFns, glyphMap } from "d531df0d6e0756b5"

// // Data
// import { key_data, minutes, filteredData } from "ed70633b2fdc573f"
// import { normalizedData } from "1daf122860a44c9b"

import {
        // choropleth, 
        // decarbonisationGlyph, 
        scores,
        grid_scores, 
        // lsoa_scores,
        lsoaData,
        calculateScoresGeoJSONWithRank,

        getColourForGrid,


        aggregateValues,
        selected_parameters,
        initialWeights,

        appendRecordsAggrFn,
        postAggrFn,

        // drawLegend,
        // drawBarChart,
        // drawNightingaleRoseChart,

        // colourMap,
        colours,
        // aggregateValues,
        } from "a884d6781195d883"

import {quickmap} from "@danylaksono/quickmap"

discr = require("statsbreaks")

```



<!-- ::: -->

# Case: Cambridge

```{ojs}
//| output: false
//| echo: false



mutable overlaiddata = null

```

## {.sidebar}

```{ojs}

// viewof tile = Inputs.select(maptypes, {label: "Basemap"})

viewof gridTransparency = {
    const nb = Inputs.range([0, 1], {
        value: 0.5,
        label: "Grid transparency"
    })
    nb.number.remove();
    return nb;
}

viewof glyphModeDecarb = Inputs.radio(["Bar Chart", "Rose Chart"], {
  label: "Glyph Mode",
  value: "Rose Chart"
})


viewof weights = Inputs.form(inputs, {
  template: (
    inputs
  ) => htl.html`<div style="display: flex; flex-direction: column;">
  ${Object.values(inputs)}
</div>`
})

```

```{ojs}
//| output: false
//| echo: false

inputs = {
  var inputs = {};
  for (var i = 0; i < selected_parameters.length; i++) {
    var obj = initialWeights[i];
    inputs[selected_parameters[i]] = Inputs.range([-1, 1], {
      label: selected_parameters[i],
      step: 0.1,
      value: obj
    });
    inputs[selected_parameters[i]].number.remove();
    inputs[selected_parameters[i]].range.style.margin = 0;
  }

  return inputs;
}
```


## Glyph Dashboard

```{ojs}

decarbonisationGlyph = {
  await visibility();
  const decarbonisationGlyph = glyphMap({
    data: grid_scores,
    getLocationFn: (row) => [row.long, row.lat],
    cellSize: 30,
    mapType: "CartoPositronNoLabel",
    discretisationShape: "grid",

    width: window.innerWidth/2 - 220,
    height: window.innerHeight - 120,
    // greyscale: true,
    tileWidth: 150,

    glyph: {
      aggrFn: appendRecordsAggrFn,
      postAggrFn: postAggrFn,
      // drawFn: drawFn,
      // postDrawFn: drawLegend
    //   tooltipTextFn: (cell) => {
    //     if (cell.averages) {
    //       mutable overlaiddata = [cell.averages, cell.score];
    //       // const text = cell.averages["pv_annualgen"];
    //       const textBuilder = [];
    //       for (const variable of selected_parameters) {
    //         const average = cell.averages[variable] ?? "-";
    //         const percentage = average ? Math.round(average) + "%" : "-";
    //         textBuilder.push(`${variable}=${percentage}; <br>`);
    //       }
    //       const text = textBuilder.join("").slice(0, -4); // Remove trailing "; "

    //       return text;
    //     }
    //   }
    }
  });

  return decarbonisationGlyph;
}



// function appendRecordsAggrFn(cell, row, weight, global, panel) {
//   if (!cell.records) cell.records = []; //if the cell doesn't currently have a records property, make one
//   cell.records.push(row); //append the record
// }

// function postAggrFn(cells, cellSize, global, panel) {
//   for (const cell of cells) {
//     // console.log(cell.record);
//     cell.averages = {};
//     if (cell.records) {
//       // Averages the values for each cell
//       // console.log("summarise", reshapeData(aggregatesCell(cell.records)));
//       cell.averages = aggregateValues(cell.records, selected_parameters);

//       // cell score
//       const cellScores = cell.records.map((d) => d.score);
//       cell.score = d3.max(cellScores);
//       // console.log(cell.averages);
//     }
//   }
// }

```


```{ojs}
//| echo: false
//| output: false

function interactiveDrawFn(mode) {
  return function drawFn(cell, x, y, cellSize, ctx, global, panel) {
    if (!cell) return;
    const padding = 2;
    // ctx.globalAlpha = 0.5;

    var grid_long = cellSize - padding * 2;
    var grid_wide = cellSize - padding * 2;

    //draw cell background

    const boundary = cell.getBoundary(padding);
    // console.log("score: ", cell.score);
    ctx.fillStyle = colourMap(cell.score);

    ctx.beginPath();
    ctx.moveTo(boundary[0][0], boundary[0][1]);
    for (let i = 1; i < boundary.length; i++)
      ctx.lineTo(boundary[i][0], boundary[i][1]);
    ctx.closePath();
    ctx.fill();

    if (mode == "Bar Chart") {
      drawBarChart(ctx, x, y, cellSize, cell.averages, colours, padding);
    } else if (mode == "Rose Chart") {
      drawNightingaleRoseChart(
        ctx,
        x,
        y,
        cellSize,
        cell.averages,
        colours,
        padding
      );
    }
  };
}


// Rose Chart

function drawNightingaleRoseChart(
  ctx,
  x,
  y,
  cellSize,
  data, // Aggregated data
  colours,
  padding = 2
) {
  let radius = (cellSize - 2 * padding) / 2;

  // Calculate center of the chart
  let centerX = x; //+ padding; //+ radius;
  let centerY = y; // + padding; //+ radius;

  // Calculate angle of each segment
  let segmentAngle = (2 * Math.PI) / Object.keys(data).length;

  // Iterate over each data type (parameter)
  Object.keys(data).forEach((type, i) => {
    // Make the lower color 'whiter'
    const colorScale = d3
      .scaleLinear()
      .domain([0, 100])
      .range(["white", colours[i]]);

    const hslColour = d3.hsl(colours[i]);

    // Initialize inner radius
    let innerRadius = 0;

    // Access the single value for the current parameter
    const value = data[type]; // Directly access value from aggregated data

    // Calculate outer radius of the segment
    let outerRadius = (value / 100) * radius;

    // Adjust saturation based on value (whiter=less value)
    const adjustedColor = colorScale(value); // not used

    // Use D3 color object for opacity based on weights
    const d3Color = d3.color(colours[i]);
    d3Color.opacity = weights[selected_parameters[i]];

    const modifiedRGBA = d3Color.toString();

    // Set fill style with adjusted color and opacity
    ctx.fillStyle = modifiedRGBA;

    // Begin path
    ctx.beginPath();

    // Draw the segment
    ctx.arc(
      centerX,
      centerY,
      outerRadius,
      i * segmentAngle,
      (i + 1) * segmentAngle
    );
    ctx.lineTo(centerX, centerY);
    ctx.closePath();

    ctx.fill();

    // White stroke between segment
    ctx.strokeStyle = "white";
    ctx.lineWidth = 0.4;
    ctx.stroke();

    innerRadius = outerRadius;
  });
}


// Bar chart
function drawBarChart(
  ctx,
  x,
  y,
  cellSize,
  data, // Aggregated data
  colours,
  padding
) {
  // console.log(data);
  // // Calculate maximum absolute weight for positioning
  const maxAbsoluteWeight = Math.max(...Object.values(weights).map(Math.abs));

  // Calculate total width of bars based on weights
  const totalBarWidth = Object.values(weights).reduce(
    (sum, weight) => sum + Math.abs(weight),
    0
  );

  const availableWidth = cellSize - 2 * maxAbsoluteWeight;

  // Draw center line
  ctx.beginPath();
  ctx.moveTo(x - cellSize / 2 + padding, y);
  ctx.lineTo(x + cellSize / 2 - padding, y);
  ctx.lineWidth = 0.4;
  ctx.stroke();

  // // Calculate starting position for the first bar
  let currentX = x - availableWidth / 2;

  // Iterate over each parameter and draw its bar
  selected_parameters.forEach((parameter, i) => {
    const value = data[parameter]; // Access value from aggregated data
    const color = colours[i];
    const weight = weights[parameter];

    // Calculate bar width based on weight and total bar width
    let barWidth = (Math.abs(weight) * availableWidth) / totalBarWidth;

    const minBarWidth = 1;
    barWidth = Math.max(barWidth, minBarWidth);

    // Calculate bar height based on value and available vertical space
    const barHeight = (value / 100) * (cellSize / 2); // Adjust for half-cell height

    // Calculate bar position based on weight and center line
    let barY = y;

    // Draw the bar
    ctx.fillStyle = color;
    ctx.fillRect(currentX, barY, barWidth, -1 * barHeight * weight);

    // Update starting position for the next bar
    currentX += barWidth;
  });
}


// Legend
function drawLegend(grid, cellSize, ctx, global, panel) {
  ctx.font = "10px sans-serif";
  ctx.textAlign = "left";
  ctx.textBaseline = "middle";

  const maxTextWidth = d3.max(
    selected_parameters.map((item) => ctx.measureText(item).width)
  );

  const x = panel.getWidth() - maxTextWidth - 20;
  let y = panel.getHeight() - selected_parameters.length * 15;

  ctx.fillStyle = "#fff8";
  ctx.fillRect(x, y, maxTextWidth + 15, selected_parameters.length * 15);

  for (let i = 0; i < selected_parameters.length; i++) {
    ctx.fillStyle = colours[i];
    ctx.fillRect(x, y, 10, 10);
    ctx.fillStyle = "#333";
    ctx.fillText(selected_parameters[i], x + 15, y + 5);
    y += 15;
  }
}


// Glyph selector
{
  glyphModeDecarb;
  decarbonisationGlyph.setGlyph({
    drawFn: interactiveDrawFn(glyphModeDecarb)
  });
  decarbonisationGlyph.setGlyph({
    drawFn: interactiveDrawFn(glyphModeDecarb)
  });
}

```

```{ojs}
//| output: false
//| echo: false
lsoa_scores = calculateScoresGeoJSONWithRank(
  lsoaData,
  selected_parameters,
  Object.values(weights)
)


```



## Choropleth

```{ojs}
choropleth = {
  return quickmap(lsoa_scores, {
    attrib: "score",
    title: "Decarbonisation Score",
    width: 550,
    height: 600,
    fullscreen: false,
    choropleth: {
      numClass: 6,
      method: "quantile",
      colorScheme: "BuPu"
    }
  });
}
```




# Case: London

<!-- ::: {.panel-tabset} -->




# About

This page is to list the dependencies


```{ojs}
//| echo: false
//| output: false

maptypes = [
//   "StadiaStamenToner",
//   "StadiaStamenTonerLite",
//   "StadiaStamenWatercolor",
//   "StadiaStamenOutdoor",
//   "StadiaStamenTerrain",
//   "StadiaAlidade",
//   "StadiaAlidadeDark",
//   "StadiaOSMBright",
  "CartoPositron",
  "CartoPositronNoLabel",
  "CartoDark",
  "CartoDBVoyager",
  "CartoDBVoyagerNoLabel",
  "StamenTerrain",
  "StamenToner",
  "StamenTonerHybrid",
  "StamenTonerLite",
  "StamenWatercolor",
  "OSMMapnik",
  "OSMStandard",
  "WikimediaMaps"
]


function colourMap(value) {
  try {
    const color = getColourForGrid(
      value,
      discr.breaks(scores, {
        method: "quantile", // choropleth method
        nb: 6, // number of class
        minmax: true,
        precision: 2
      }),
      "BuPu"
    );

    // Apply alpha transparency using a D3 color object
    const d3Color = d3.color(color);
    d3Color.opacity = gridTransparency;

    return d3Color.toString(); // Return the color string with opacity
  } catch (error) {
    console.log("error occured during style mapping");
    // console.error(error);
    return "gray";
  }
}
```


