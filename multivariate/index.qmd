---
title: "Multivariate Gridded-Glyphmaps"
# author: "Dany Laksono, Aidan Slingsby, Radu Jianu"
execute:
  echo: false
format: 
  dashboard
    # nav-buttons: [github]
theme: 
  - cosmo
  - assets/quarto.scss
---


```{ojs}
//| echo: false
//| output: false
// Gridded-glyphmap
import { slippyMap } from "8d39dcfbc8ad8557"
import { _setupParamFns, glyphMap } from "d531df0d6e0756b5"

// Data
import { key_data, minutes, filteredData } from "ed70633b2fdc573f"

import { normalizedData } from "1daf122860a44c9b"

```


# {.sidebar}

</br>

```{ojs}
viewof tile = Inputs.select(maptypes, {label: "Basemap"})
viewof getKeys = Inputs.checkbox(key_data, {
  label: "Variables",
  value: ["employment", "gp"]
})

viewof getMinutes = Inputs.checkbox(minutes, {
  label: "Travel time (minutes)",
  value: [15, 30, 45, 60],
  disabled: true
})


viewof glyphMode = Inputs.radio(["Rose Chart", "Line Chart", "Heatmaps"], {
  label: "Glyph Mode",
  value: "Line Chart"
})


{
  // await visibility();
  const [w, h] = [150, 150];
  const ctx = DOM.context2d(w, h);
  const canvas = ctx.canvas;
  ctx.fillStyle = "lightgrey";
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  // drawLineChart(ctx, reshapedData);
  const x = canvas.width / 2 - 10;
  const y = canvas.height / 2 - 80;
  drawLineChart(ctx, x, y, 300, overlaiddata);

  return canvas;
}
```


# Examples { scrolling="true"}


## Glyph Dashboard
```{ojs}
accessibilityGlyph = {
  await visibility();
  const accessibilityGlyph = glyphMap({
    data: normalizedData, // data are normalised accross London. for data across UK, use 'filteredData'
    getLocationFn: (row) => [row.long, row.lat],
    cellSize: 30,
    mapType: "CartoPositron",
    discretisationShape: "grid",

    // width: 600,
    // height: 400,
    width: window.innerWidth - 330,
    height: window.innerHeight - 120,
    greyscale: true,
    tileWidth: 150,

    glyph: {
      aggrFn: appendRecordsAggrFn,
      postAggrFn: postAggrFn,
      postDrawFn: drawLegend,
      tooltipTextFn: (cell) => {
        if (cell.averages) {
          mutable overlaiddata = cell.averages;
          const textBuilder = [];
          for (const variable of getKeys) {
            const average = cell.averages[variable][0] ?? "-";
            const percentage = average ? Math.round(average) + "%" : "-";
            textBuilder.push(`${variable}=${percentage}; <br>`);
          }
          const text = textBuilder.join("").slice(0, -4); // Remove trailing "; "

          return text;
        }
      }
    }
  });

  return accessibilityGlyph;
}
```

```{ojs}
//| echo: false
//| output: false


// Glyph Functions

function appendRecordsAggrFn(cell, row, weight, global, panel) {
  if (!cell.records) cell.records = []; //if the cell doesn't currently have a records property, make one
  cell.records.push(row); //append the record
}

function postAggrFn(cells, cellSize, global, panel) {
  for (const cell of cells) {
    cell.averages = [];
    if (cell.records) {
      // console.log("summarise", reshapeData(aggregatesCell(cell.records)));
      cell.averages = reshapeData(aggregatesCell(cell.records));
    }
  }
}

//draw a little linechart of each variable
function interactiveDrawFn(mode) {
  return function drawFn(cell, x, y, cellSize, ctx, global, panel) {
    if (!cell) return;
    const padding = 2;
    ctx.globalAlpha = 0.5;

    var grid_long = cellSize - padding * 2;
    var grid_wide = cellSize - padding * 2;

    //draw cell background
    const boundary = cell.getBoundary(padding);
    // console.log("boundary: ", boundary);
    ctx.fillStyle = "#cccb";
    ctx.beginPath();
    ctx.moveTo(boundary[0][0], boundary[0][1]);
    for (let i = 1; i < boundary.length; i++)
      ctx.lineTo(boundary[i][0], boundary[i][1]);
    ctx.closePath();
    ctx.fill();

    // draw line charts
    if (mode == "Line Chart") {
      drawLineChart(ctx, x, y, cellSize, cell.averages);
    } else if (mode == "Heatmaps") {
      drawHeatmapChart(ctx, x, y, cellSize, cell.averages);
    } else if (mode == "Rose Chart") {
      drawNightingaleRoseChart(ctx, x, y, cellSize, cell.averages, colours);
    }
  };
}
```

```{ojs}
//| echo: false
//| output: false

// Drawing functions

function drawLineChart(ctx, x, y, cellSize, values) {
  // Calculate boundary based on cell center and size
  const boundary = [
    x - cellSize / 2,
    y - cellSize / 2,
    x + cellSize / 2,
    y + cellSize / 2
  ];

  // Define margins within the cell
  const margin = 0;

  // Calculate actual drawing area within the cell
  const width = cellSize - 2 * margin;
  const height = cellSize - 2 * margin;

  const xScale = d3
    .scaleLinear()
    .domain([0, getMinutes.length])
    .range([margin, width - margin]);

  const yScale = d3
    .scaleLinear()
    .domain([0, 100])
    .range([height - margin, margin]);

  // Draw lines for each key-data series
  for (let i = 0; i < getKeys.length; i++) {
    const color = colours[i];
    const dataPoints = values[getKeys[i]].map((value, index) => ({
      x: xScale(index) + boundary[0], // Offset x-coordinates to cell position
      y: yScale(value) + boundary[1] // Offset y-coordinates to cell position
    }));

    ctx.beginPath();
    ctx.moveTo(dataPoints[0].x, dataPoints[0].y);
    for (let j = 1; j < dataPoints.length; j++) {
      ctx.lineTo(dataPoints[j].x, dataPoints[j].y);
    }
    ctx.strokeStyle = color;
    ctx.lineWidth = 2;
    ctx.stroke();
  }
}

function drawHeatmapChart(ctx, x, y, cellSize, values) {
  // Define the size of each grid cell within the heatmap
  const gridSize = cellSize / getMinutes.length;

  // Calculate the top-left corner of the cell
  const startX = x - cellSize / 2;
  const startY = y - cellSize / 2;

  // Iterate over each key-data series
  for (let i = 0; i < getKeys.length; i++) {
    const key = getKeys[i];
    const dataPoints = values[key];

    // Draw a rectangle and a circle for each data point
    for (let j = 0; j < getMinutes.length; j++) {
      const value = dataPoints[j];

      // Calculate the position of the rectangle
      const rectX = startX + i * gridSize;
      const rectY = startY + j * gridSize;

      // Set the color based on the value
      let color;
      if (value === null || value === 0) {
        color = "gray";
      } else {
        const colorScale = d3
          .scaleLinear()
          .domain([0, 100])
          .range(["#f0f0f0", colours[i]]); // whites mean low value
        color = colorScale(value);
      }

      // Draw the rectangle
      ctx.fillStyle = color;
      ctx.fillRect(rectX, rectY, gridSize, gridSize);

      // Calculate the radius of the circle, ensuring it doesn't exceed half the gridSize
      const circleRadius = Math.min((value * gridSize) / 200, gridSize / 2);

      // Calculate the position of the circle
      const circleX = rectX + gridSize / 2;
      const circleY = rectY + gridSize / 2;

      // Draw the circle
      ctx.beginPath();
      ctx.arc(circleX, circleY, circleRadius, 0, 2 * Math.PI);
      ctx.fillStyle = "black";
      ctx.fill();
    }
  }
}

function drawBubbleRingsChart(ctx, x, y, cellSize, values) {
  const minSize = 10;
  const maxRadius = 30;
  const keyPositions = {}; // Store random positions for each key

  // Generate random positions for each key
  for (const key of getKeys) {
    // const maxOffset = cellSize / 3; // Adjust for desired spacing
    const maxOffset = cellSize / 3 - maxRadius; // Adjust for desired spacing

    keyPositions[key] = {
      x: x + Math.random() * maxOffset - maxOffset / 2,
      y: y + Math.random() * maxOffset - maxOffset / 2
    };
  }

  for (let i = getKeys.length - 1; i >= 0; i--) {
    const color = colours[i];
    const key = getKeys[i];
    const dataPoints = values[key];
    const { x: keyCenterX, y: keyCenterY } = keyPositions[key];

    for (let j = 0; j < getMinutes.length; j++) {
      // const radius = Math.max(minSize, dataPoints[j]); // * (cellSize / 2 - minSize / getKeys.length));
      const scaledRadius = (dataPoints[j] * maxRadius) / 100; // Scale percentage (0-100) to maxRadius
      ctx.beginPath();
      ctx.arc(keyCenterX, keyCenterY, scaledRadius, 0, 2 * Math.PI);
      ctx.fillStyle = color;
      ctx.fill();
    }
  }
}

function drawNightingaleRoseChart(
  ctx,
  x,
  y,
  cellSize,
  data,
  colours,
  padding = 2
) {
  // Calculate radius of the chart
  let radius = (cellSize - 2 * padding) / 2;

  // Calculate center of the chart
  let centerX = x + padding + radius;
  let centerY = y + padding + radius;

  // Calculate angle of each segment
  let segmentAngle = (2 * Math.PI) / Object.keys(data).length;

  // Iterate over each data type
  Object.keys(data).forEach((type, i) => {
    // // make the lower color 'whiter'
    const colorScale = d3
      .scaleLinear()
      .domain([0, 100])
      .range(["white", colours[i]]);

    const hslColour = d3.hsl(colours[i]);
    // console.log(hslColour.s);

    // Initialize inner radius
    let innerRadius = 0;

    // Iterate over each time value
    data[type]
      .slice()
      .reverse()
      .forEach((value, j) => {
        // Calculate outer radius of the segment
        let outerRadius = (value / 100) * radius;

        // adjust saturation based on minutes (whiter=less minutes)
        const adjustedColor = colorScale(value);

        // const rgbaColor = d3.rgb(adjustedColor).toString();

        // opacity based on weights
        const d3Color = d3.color(adjustedColor);
        d3Color.opacity = weights.slice(0, getKeys.length)[i]; // weights[i];
        const modifiedRGBA = d3Color.toString();

        // Set fill style with adjusted color and opacity
        // ctx.fillStyle = rgbaColor + opacity.toString(16).padStart(2, "0");
        console.log("modified ", modifiedRGBA);
        ctx.fillStyle = modifiedRGBA;

        // Begin path
        ctx.beginPath();

        // Draw the segment
        ctx.arc(
          centerX,
          centerY,
          outerRadius,
          i * segmentAngle,
          (i + 1) * segmentAngle
        );
        ctx.lineTo(centerX, centerY);
        ctx.closePath();

        ctx.fill();

        // white stroke between segment
        ctx.strokeStyle = "white";
        ctx.stroke();

        innerRadius = outerRadius;
      });
  });
} 
```

```{ojs}
//| echo: false
//| output: false

// Helper functions

mutable overlaiddata = null

{
  glyphMode;
  accessibilityGlyph.setGlyph({
    drawFn: interactiveDrawFn(glyphMode)
  });
  accessibilityGlyph.setGlyph({
    drawFn: interactiveDrawFn(glyphMode)
  });
}

colours = [
  "#2e8b57ba",
  "#ffa500ba",
  "#0000ffba",
  "#1e90ffba",
  "#00ff00ba",
  "#ff1493ba"
]

weights = [0.8, 1, 0, 1, 0.9, 1]

function drawLegend(grid, cellSize, ctx, global, panel) {
  ctx.font = "10px sans-serif";
  ctx.textAlign = "left";
  ctx.textBaseline = "middle";

  const maxTextWidth = d3.max(
    getKeys.map((item) => ctx.measureText(item).width)
  );

  const x = panel.getWidth() - maxTextWidth - 20;
  let y = panel.getHeight() - getKeys.length * 15;

  ctx.fillStyle = "#fff8";
  ctx.fillRect(x, y, maxTextWidth + 15, getKeys.length * 15);

  for (let i = 0; i < getKeys.length; i++) {
    ctx.fillStyle = colours[i];
    ctx.fillRect(x, y, 10, 10);
    ctx.fillStyle = "#333";
    ctx.fillText(getKeys[i], x + 15, y + 5);
    y += 15;
  }
}
```


```{ojs}
//| echo: false
//| output: false

// Data related Functions

function reshapeData(data) {
  const values = {};

  for (const key of key_data) {
    values[key] = minutes.map((minute) => {
      const valueProperty = `${key}_pct_${minute}`;
      return data[0][valueProperty]; // One data point per cells
    });
  }

  return values;
}

function aggregatesCell(data) {
  if (data.length < 1) return;

  // Use a Map to collect unique LSOA11CD values and their associated data
  const uniqueData = new Map();
  for (const item of data) {
    const LSOA11CD = item.LSOA11CD;
    if (!uniqueData.has(LSOA11CD)) {
      uniqueData.set(LSOA11CD, []);
    }
    uniqueData.get(LSOA11CD).push(item);
  }

  // Create a single object with averaged values and all unique LSOA11CD
  const averagedObject = {
    LSOA11CD: Array.from(uniqueData.keys()).join(", "), // Combine unique LSOA11CD into a single string
    no_data: uniqueData.size // store how many unique data are aggregated in the cell
  }; 

  // const valueKeys = Object.keys(data[0]).filter((key) => key !== "LSOA11CD"); // Get value keys
  const valueKeys = Object.keys(data[0]).filter(
    (key) => key !== "LSOA11CD" && key !== "lat" && key !== "long"
  );
  for (const key of valueKeys) {
    let total = 0;
    let count = 0;
    for (const entries of uniqueData.values()) {
      for (const entry of entries) {
        if (key in entry) {
          total += entry[key];
          count++;
        }
      }
    }
    const average = total / count || 0; // Default to 0 if no data
    averagedObject[key] = average;
  }


  return [averagedObject]; // Return an array with the single averaged object
}


```



# About

This page is to list the dependencies


```{ojs}
//| echo: false
//| output: false

maptypes = [
//   "StadiaStamenToner",
//   "StadiaStamenTonerLite",
//   "StadiaStamenWatercolor",
//   "StadiaStamenOutdoor",
//   "StadiaStamenTerrain",
//   "StadiaAlidade",
//   "StadiaAlidadeDark",
//   "StadiaOSMBright",
  "CartoPositron",
  "CartoPositronNoLabel",
  "CartoDark",
  "CartoDBVoyager",
  "CartoDBVoyagerNoLabel",
  "StamenTerrain",
  "StamenToner",
  "StamenTonerHybrid",
  "StamenTonerLite",
  "StamenWatercolor",
  "OSMMapnik",
  "OSMStandard",
  "WikimediaMaps"
]

```


